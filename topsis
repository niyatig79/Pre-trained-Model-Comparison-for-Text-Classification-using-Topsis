import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import time
from transformers import pipeline
from sklearn.metrics import accuracy_score, f1_score

# Load data
data = pd.read_csv("data.csv")

# Extract columns
max_seq_length = data["Max_Seq_Length"].values
batch_size = data["Batch_Size"].values
accuracy = data["Accuracy"].values
f1_score_values = data["F1_Score"].values

# Define weights
weights = np.array([0.5, 0.4, 0.3, 0.2])

# Normalize the data
normalized_matrix = np.column_stack([
    max_seq_length / np.max(max_seq_length),
    batch_size / np.max(batch_size),
    accuracy / np.max(accuracy),
    f1_score_values / np.max(f1_score_values)
])

# Apply weights
weighted_normalized_matrix = normalized_matrix * weights

# Calculate ideal and negative-ideal solutions
ideal_solution = np.max(weighted_normalized_matrix, axis=0)
negative_ideal_solution = np.min(weighted_normalized_matrix, axis=0)

# Calculate distances
distance_to_ideal = np.sqrt(np.sum((weighted_normalized_matrix - ideal_solution) ** 2, axis=1))
distance_to_negative_ideal = np.sqrt(np.sum((weighted_normalized_matrix - negative_ideal_solution) ** 2, axis=1))

# Calculate TOPSIS scores
topsis_scores = distance_to_negative_ideal / (distance_to_ideal + distance_to_negative_ideal)

# Add scores and ranks to the data
data["TOPSIS_Score"] = topsis_scores
data["Rank"] = data["TOPSIS_Score"].rank(ascending=False)

# Display results
print("Model Ranking:")
print(data[["Model", "TOPSIS_Score", "Rank"]].sort_values(by="Rank"))

# Save results to CSV
data.to_csv("result.csv", index=False)

# Plot TOPSIS ranking
plt.figure(figsize=(8, 5))
sns.barplot(x=data.sort_values(by="Rank")["Model"], y=data.sort_values(by="Rank")["TOPSIS_Score"], palette="viridis")

plt.xlabel("Model", fontsize=12)
plt.ylabel("TOPSIS Score", fontsize=12)
plt.title("TOPSIS Ranking of Models", fontsize=14)
plt.xticks(rotation=45)
plt.grid(axis="y", linestyle="--", alpha=0.7)

# Save plot as image
plt.savefig("topsis_ranking.png")
plt.show()

# Print final analysis
print("\nModel Performance Analysis:")
print(data[["Model", "TOPSIS_Score", "Rank"]].sort_values(by="Rank"))

best_model = data.sort_values(by="Rank").iloc[0]["Model"]
print(f"\nThe best model according to the TOPSIS ranking is **{best_model}**.")
print("A higher accuracy and F1-score indicate better predictive performance, while a lower inference time is preferable for real-time applications.")
